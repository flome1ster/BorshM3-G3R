import SwiftUI
import Firebase
import FirebaseMessaging

@main
struct SupMessengerApp: App {
    
    @UIApplicationDelegateAdaptor(AppDelegate.self) var delegate
    @ObservedObject var userViewModel: UserViewModel = UserViewModel()
    var body: some Scene {
        WindowGroup {
            ContentView()
                .environmentObject(userViewModel)
        }
    }
}

class AppDelegate: NSObject,UIApplicationDelegate{
    let gcmMessageIDKey = "gcm.message_id"
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {
        FirebaseApp.configure()
        FirebaseConfiguration.shared.setLoggerLevel(.min)
        Messaging.messaging().delegate = self
        
        if #available(iOS 10.0, *) {
          // For iOS 10 display notification (sent via APNS)
          UNUserNotificationCenter.current().delegate = self

          let authOptions: UNAuthorizationOptions = [.alert, .badge, .sound]
          UNUserNotificationCenter.current().requestAuthorization(
            options: authOptions,
            completionHandler: { _, _ in }
          )
        } else {
          let settings: UIUserNotificationSettings =
            UIUserNotificationSettings(types: [.alert, .badge, .sound], categories: nil)
          application.registerUserNotificationSettings(settings)
        }

        application.registerForRemoteNotifications()

        return true
    }
    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
    }
    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
       
    }
    
}

extension AppDelegate: MessagingDelegate{
    //Token receive
    func messaging(_ messaging: Messaging, didReceiveRegistrationToken fcmToken: String?) {
        print("token: ", fcmToken ?? "")
        let dataDict: [String: String] = ["token": fcmToken ?? ""]
        NotificationCenter.default.post(name: Notification.Name("FCMToken"), object: nil, userInfo: dataDict)
        if(UserDefaults.standard.bool(forKey: "isReg")){
            NotificationService.shared.setFcmToken(token: fcmToken!){response, error in
                print("token updated")
            }
        }
    }
    
    
    func application(_ application: UIApplication,
                     didReceiveRemoteNotification userInfo: [AnyHashable: Any],
                     fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult)
                       -> Void) {
      // If you are receiving a notification message while your app is in the background,
      // this callback will not be fired till the user taps on the notification launching the application.
      // TODO: Handle data of notification
        
      // With swizzling disabled you must let Messaging know about the message, for Analytics
      // Messaging.messaging().appDidReceiveMessage(userInfo)
    print("Method 1")
      // Print message ID.
      if let messageID = userInfo[gcmMessageIDKey] {
        print("Message ID: \(messageID)")
      }
        
      // Print full message.
      print(userInfo)
      let content =  UNMutableNotificationContent()
        content.title =  userInfo["name"] as? String ?? "Empty title"
        content.body = userInfo["text"] as? String ?? "Empty body"
        content.badge = (UIApplication.shared.applicationIconBadgeNumber + 1) as NSNumber
        
        let request = UNNotificationRequest(identifier: "message", content: content, trigger: nil)
        UNUserNotificationCenter.current().add(request)
      completionHandler(UIBackgroundFetchResult.newData)
    }
}

extension AppDelegate: UNUserNotificationCenterDelegate {
    
  // Receive displayed notifications for iOS 10 devices.
  func userNotificationCenter(_ center: UNUserNotificationCenter,
                              willPresent notification: UNNotification,
                              withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions)
                                -> Void) {
      let userInfo = notification.request.content.userInfo

    // With swizzling disabled you must let Messaging know about the message, for Analytics
    // Messaging.messaging().appDidReceiveMessage(userInfo)
   
    // ...
      print("Method 2")
    // Print full message.
    print(userInfo)

    // Change this to your preferred presentation option
      completionHandler([[.banner, .badge, .sound]])
  }

  func userNotificationCenter(_ center: UNUserNotificationCenter,
                              didReceive response: UNNotificationResponse,
                              withCompletionHandler completionHandler: @escaping () -> Void) {
    let userInfo = response.notification.request.content.userInfo

    // ...

    // With swizzling disabled you must let Messaging know about the message, for Analytics
    // Messaging.messaging().appDidReceiveMessage(userInfo)
      print("Method 3")
    // Print full message.
    print(userInfo)
      UIApplication.shared.applicationIconBadgeNumber = UIApplication.shared.applicationIconBadgeNumber
    completionHandler()
  }
    
}



        content.title =  userInfo["name"] as? String ?? "Empty title"
        content.body = userInfo["text"] as? String ?? "Empty text"



                /*VStack(alignment: .leading){ //VStack LoginPasswordButtons
                   
                        
                            
                        CustomTextField(placeholder: Text("Введите логин"), text: $userViewModel.user.email, secure: false)
        
                            .background(RoundedRectangle(cornerRadius: 15)
                                .foregroundColor(.white)
                            )
                        Text("Пароль")
                            .foregroundColor(.white)
                            .padding(10.0)
                            
                        CustomTextField(placeholder: Text("Введите пароль"), text: $userViewModel.user.password, secure: false)

                            .background(RoundedRectangle(cornerRadius: 15)
                                .foregroundColor(.white))
                    
                    CustomButtonOrange(text:"Начать работу", action: {userViewModel.login()}
                    ) .padding()
                        
                    ForgotButton(text:"Забыли пароль?", action: {flag = true}
                    )
                } //Vstack LoginPasswordButtons
                .offset(y: -100)
                NavigationLink(destination: Main(),
                               isActive: $userViewModel.isRegistr){
                    EmptyView()
                }
                NavigationLink(destination: SignUp(), isActive: $flag){
                    EmptyView()
                }
                

            } //VstackAll*/
